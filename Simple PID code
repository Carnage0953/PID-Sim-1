#include <Arduino.h>

// Definieer de sensorpinnen
const int sensorPinsFront[5] = {2, 3, 4, 5, 6};

// Definieer de motorpinnen
const int motorPinLeft = 12;
const int motorPinRight = 13;

// PID-parameters
double Kp = 1.0;
double Ki = 0.0;
double Kd = 0.0;

double error = 0.0;
double previous_error = 0.0;
double integral = 0.0;
double derivative = 0.0;

void setup() {
  // Initialiseer de sensor- en motorpinnen
  for (int i = 0; i < 5; i++) {
    pinMode(sensorPinsFront[i], INPUT);
  }
  pinMode(motorPinLeft, OUTPUT);
  pinMode(motorPinRight, OUTPUT);
}

void controlMotors(double pidValue) {
 // int baseSpeed = 100; // Basis snelheid voor de motoren
  int leftspeed = 100 // basis snelheid linker motoren
  int rightspeed = 100 // basis snelheid recter motoren
  int correction = abs(pidValue); // Correctie op basis van de foutwaarde

  leftspeed = leftseed + pidValue
  rightspeed = rightspeed - pidValue

  if (leftSpeed > 255) { leftSpeed = 255}   // uitgangen moeten tussen 0 en 255 blijven.
  if (leftSpeed < 0 ) { leftSpeed = 0 }
  if (rightSpeed > 255) { rightSpeed = 255} 
  if (rightSpeed < 0 ) { rightSpeed = 0 }

  analogWrite(motorPinLeft, leftSpeed );
  analogWrite(motorPinRight, rightSpeed );



 // if (pidValue > 0) {
    // De robot wijkt af naar links, dus verhoog de snelheid van de rechtermotor en verlaag de snelheid van de linkermotor
  //  analogWrite(motorPinRight, baseSpeed + correction);
   // analogWrite(motorPinLeft, baseSpeed - correction);
//  } else if (pidValue < 0) {
    // De robot wijkt af naar rechts, dus verhoog de snelheid van de linkermotor en verlaag de snelheid van de rechtermotor
//    analogWrite(motorPinRight, baseSpeed - correction);
//    analogWrite(motorPinLeft, baseSpeed + correction);
//  } else {
    // De robot is op de lijn, dus rijd rechtdoor met de basis snelheid
  //  analogWrite(motorPinRight, baseSpeed);
 //   analogWrite(motorPinLeft, baseSpeed);
  }
}

void loop() {
  // Lees de sensorwaarden
  double calculateError(int sensorValuesFront[]);

  int sensorValuesFront[5];
  for (int i = 0; i < 5; i++) {
    sensorValuesFront[i] = analogRead(sensorPinsFront[i]);
  }

  // Bereken de fout voor de PID-controller
  error = calculateError(sensorValuesFront);

  // Bereken de PID-waarde
  integral = integral + error;
  derivative = error - previous_error;
  double pidValue = Kp*error + Ki*integral + Kd*derivative;
  previous_error = error;

  // Stuur de motoren aan op basis van de PID-waarde
  controlMotors(pidValue);
}

// Implementeer hier de logica om de fout te berekenen op basis van de sensorwaarden
double calculateError(int sensorValuesFront[]) {
  int weight[5] = {-2, -1, 0, 1, 2}; // Gewichten voor elke sensor
  int sum = 0;
  int weightedSum = 0;

  for (int i = 0; i < 5; i++) {
    sum += sensorValuesFront[i];
    weightedSum += weight[i] * sensorValuesFront[i];
  }

  // Bereken de gemiddelde fout
  double error = (double)weightedSum / sum;

  return error;
}
  // Voor nu, retourneer gewoon een dummy waarde
  //return 0.0;
